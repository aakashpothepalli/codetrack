import React from 'react'
export let primeFactorization1 = (<div>
    <h1 className="code-line" data-line-start={0} data-line-end={1}><a id="Integer_factorization_0" />Integer factorization</h1>
    <p className="has-line-data" data-line-start={2} data-line-end={3}>In this article we list several algorithms for factorizing integers, each of them can be both fast and also slow (some slower than others) depending on their input.</p>
    <p className="has-line-data" data-line-start={4} data-line-end={6}>Notice, if the number that you want to factorize is actually a prime number, most of the algorithms, especially Fermat’s factorization algorithm, Pollard’s p-1, Pollard’s rho algorithm will run very slow.<br />
      So it makes sense to perform a probabilistic (or a fast deterministic) <a href="./algebra/primality_tests.html">primality test</a> before trying to factorize the number.</p>
    <h2 className="code-line" data-line-start={7} data-line-end={8}><a id="Trial_division_7" />Trial division</h2>
    <p className="has-line-data" data-line-start={9} data-line-end={10}>This is the most basic algorithm to find a prime factorization.</p>
    <p className="has-line-data" data-line-start={11} data-line-end={14}>We divide by each possible divisor $d$.<br />
      We can notice, that it is impossible that all prime factors of a composite number $n$ are bigger than $\sqrt{'{'}n{'}'}$.<br />
      Therefore, we only need to test the divisors $2 \le d \le \sqrt{'{'}n{'}'}$, which gives us the prime factorization in $O(\sqrt{'{'}n{'}'})$.</p>
    <p className="has-line-data" data-line-start={15} data-line-end={18}>The smallest divisor has to be a prime number.<br />
      We remove the factor from the number, and repeat the process.<br />
      If we cannot find any divisor in the range $[2; \sqrt{'{'}n{'}'}]$, then the number itself has to be prime.</p>
    <pre><code className="has-line-data" data-line-start={20} data-line-end={33}><span className="hljs-built_in">vector</span>&lt;<span className="hljs-keyword">long</span> <span className="hljs-keyword">long</span>&gt; trial_division1(<span className="hljs-keyword">long</span> <span className="hljs-keyword">long</span> n) {"{"}{"\n"}{"    "}<span className="hljs-built_in">vector</span>&lt;<span className="hljs-keyword">long</span> <span className="hljs-keyword">long</span>&gt; factorization;{"\n"}{"    "}<span className="hljs-keyword">for</span> (<span className="hljs-keyword">long</span> <span className="hljs-keyword">long</span> d = <span className="hljs-number">2</span>; d * d &lt;= n; d++) {"{"}{"\n"}{"        "}<span className="hljs-keyword">while</span> (n % d == <span className="hljs-number">0</span>) {"{"}{"\n"}{"            "}factorization.push_back(d);{"\n"}{"            "}n /= d;{"\n"}{"        "}{"}"}{"\n"}{"    "}{"}"}{"\n"}{"    "}<span className="hljs-keyword">if</span> (n &gt; <span className="hljs-number">1</span>){"\n"}{"        "}factorization.push_back(n);{"\n"}{"    "}<span className="hljs-keyword">return</span> factorization;{"\n"}{"}"}{"\n"}</code></pre>
    <h3 className="code-line" data-line-start={34} data-line-end={35}><a id="Wheel_factorization_34" />Wheel factorization</h3>
    <p className="has-line-data" data-line-start={36} data-line-end={41}>This is an optimization of the trial division.<br />
      The idea is the following.<br />
      Once we know that the number is not divisible by 2, we don’t need to check every other even number.<br />
      This leaves us with only $50%$ of the numbers to check.<br />
      After checking 2, we can simply start with 3 and skip every other number.</p>
    <pre><code className="has-line-data" data-line-start={43} data-line-end={60}><span className="hljs-built_in">vector</span>&lt;<span className="hljs-keyword">long</span> <span className="hljs-keyword">long</span>&gt; trial_division2(<span className="hljs-keyword">long</span> <span className="hljs-keyword">long</span> n) {"{"}{"\n"}{"    "}<span className="hljs-built_in">vector</span>&lt;<span className="hljs-keyword">long</span> <span className="hljs-keyword">long</span>&gt; factorization;{"\n"}{"    "}<span className="hljs-keyword">while</span> (n % <span className="hljs-number">2</span> == <span className="hljs-number">0</span>) {"{"}{"\n"}{"        "}factorization.push_back(<span className="hljs-number">2</span>);{"\n"}{"        "}n /= <span className="hljs-number">2</span>;{"\n"}{"    "}{"}"}{"\n"}{"    "}<span className="hljs-keyword">for</span> (<span className="hljs-keyword">long</span> <span className="hljs-keyword">long</span> d = <span className="hljs-number">3</span>; d * d &lt;= n; d += <span className="hljs-number">2</span>) {"{"}{"\n"}{"        "}<span className="hljs-keyword">while</span> (n % d == <span className="hljs-number">0</span>) {"{"}{"\n"}{"            "}factorization.push_back(d);{"\n"}{"            "}n /= d;{"\n"}{"        "}{"}"}{"\n"}{"    "}{"}"}{"\n"}{"    "}<span className="hljs-keyword">if</span> (n &gt; <span className="hljs-number">1</span>){"\n"}{"        "}factorization.push_back(n);{"\n"}{"    "}<span className="hljs-keyword">return</span> factorization;{"\n"}{"}"}{"\n"}</code></pre>
    <p className="has-line-data" data-line-start={61} data-line-end={68}>This method can be extended.<br />
      If the number is not divisible by 3, we can also ignore all other multiples of 3 in the future computations.<br />
      So we only need to check the numbers $5, 7, 11, 13, 17, 19, 23, \dots$.<br />
      We can observe a pattern of these remaining numbers.<br />
      We need to check all numbers with $d \bmod 6 = 1$ and $d \bmod 6 = 5$.<br />
      So this leaves us with only $33.3%$ percent of the numbers to check.<br />
      We can implement this by checking the primes 2 and 3 first, and then start checking with 5 and alternatively skip 1 or 3 numbers.</p>
    <p className="has-line-data" data-line-start={69} data-line-end={72}>We can extend this even further.<br />
      Here is an implementation for the prime number 2, 3 and 5.<br />
      It’s convenient to use an array to store how much we have to skip.</p>
    <pre><code className="has-line-data" data-line-start={74} data-line-end={97}><span className="hljs-built_in">vector</span>&lt;<span className="hljs-keyword">long</span> <span className="hljs-keyword">long</span>&gt; trial_division3(<span className="hljs-keyword">long</span> <span className="hljs-keyword">long</span> n) {"{"}{"\n"}{"    "}<span className="hljs-built_in">vector</span>&lt;<span className="hljs-keyword">long</span> <span className="hljs-keyword">long</span>&gt; factorization;{"\n"}{"    "}<span className="hljs-keyword">for</span> (<span className="hljs-keyword">int</span> d : {"{"}<span className="hljs-number">2</span>, <span className="hljs-number">3</span>, <span className="hljs-number">5</span>{"}"}) {"{"}{"\n"}{"        "}<span className="hljs-keyword">while</span> (n % d == <span className="hljs-number">0</span>) {"{"}{"\n"}{"            "}factorization.push_back(d);{"\n"}{"            "}n /= d;{"\n"}{"        "}{"}"}{"\n"}{"    "}{"}"}{"\n"}{"    "}<span className="hljs-keyword">static</span> <span className="hljs-built_in">array</span>&lt;<span className="hljs-keyword">int</span>, 8&gt; increments = {"{"}<span className="hljs-number">4</span>, <span className="hljs-number">2</span>, <span className="hljs-number">4</span>, <span className="hljs-number">2</span>, <span className="hljs-number">4</span>, <span className="hljs-number">6</span>, <span className="hljs-number">2</span>, <span className="hljs-number">6</span>{"}"};{"\n"}{"    "}<span className="hljs-keyword">int</span> i = <span className="hljs-number">0</span>;{"\n"}{"    "}<span className="hljs-keyword">for</span> (<span className="hljs-keyword">long</span> <span className="hljs-keyword">long</span> d = <span className="hljs-number">7</span>; d * d &lt;= n; d += increments[i++]) {"{"}{"\n"}{"        "}<span className="hljs-keyword">while</span> (n % d == <span className="hljs-number">0</span>) {"{"}{"\n"}{"            "}factorization.push_back(d);{"\n"}{"            "}n /= d;{"\n"}{"        "}{"}"}{"\n"}{"        "}<span className="hljs-keyword">if</span> (i == <span className="hljs-number">8</span>){"\n"}{"            "}i = <span className="hljs-number">0</span>;{"\n"}{"    "}{"}"}{"\n"}{"    "}<span className="hljs-keyword">if</span> (n &gt; <span className="hljs-number">1</span>){"\n"}{"        "}factorization.push_back(n);{"\n"}{"    "}<span className="hljs-keyword">return</span> factorization;{"\n"}{"}"}{"\n"}</code></pre>
    <p className="has-line-data" data-line-start={98} data-line-end={100}>If we extend this further with more primes, we can even reach better percentages.<br />
      However, also the skip lists will get a lot bigger.</p>
    <h3 className="code-line" data-line-start={101} data-line-end={102}><a id="Precomputed_primes_101" />Precomputed primes</h3>
    <p className="has-line-data" data-line-start={103} data-line-end={105}>Extending the wheel factorization with more and more primes will leave exactly the primes to check.<br />
      So a good way of checking is just to precompute all prime numbers with the <a href="../SieveofEratosthenes">Sieve of Eratosthenes</a> until $\sqrt{'{'}n{'}'}$ and test them individually.</p>
    <pre><code className="has-line-data" data-line-start={107} data-line-end={124}><span className="hljs-built_in">vector</span>&lt;<span className="hljs-keyword">long</span> <span className="hljs-keyword">long</span>&gt; primes;{"\n"}{"\n"}<span className="hljs-built_in">vector</span>&lt;<span className="hljs-keyword">long</span> <span className="hljs-keyword">long</span>&gt; trial_division4(<span className="hljs-keyword">long</span> <span className="hljs-keyword">long</span> n) {"{"}{"\n"}{"    "}<span className="hljs-built_in">vector</span>&lt;<span className="hljs-keyword">long</span> <span className="hljs-keyword">long</span>&gt; factorization;{"\n"}{"    "}<span className="hljs-keyword">for</span> (<span className="hljs-keyword">long</span> <span className="hljs-keyword">long</span> d : primes) {"{"}{"\n"}{"        "}<span className="hljs-keyword">if</span> (d * d &gt; n){"\n"}{"            "}<span className="hljs-keyword">break</span>;{"\n"}{"        "}<span className="hljs-keyword">while</span> (n % d == <span className="hljs-number">0</span>) {"{"}{"\n"}{"            "}factorization.push_back(d);{"\n"}{"            "}n /= d;{"\n"}{"        "}{"}"}{"\n"}{"    "}{"}"}{"\n"}{"    "}<span className="hljs-keyword">if</span> (n &gt; <span className="hljs-number">1</span>){"\n"}{"        "}factorization.push_back(n);{"\n"}{"    "}<span className="hljs-keyword">return</span> factorization;{"\n"}{"}"}{"\n"}</code></pre>

  </div>)